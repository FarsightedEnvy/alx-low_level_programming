#include "main.h"

/**
 * _putchar - Writes a character to the standard output
 * @c: The character to print
 * Return: On success 1, on error -1
 */
int _putchar(char c) { return 0; }

/**
 * _islower - Checks for lowercase character
 * @c: The character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c) { return 0; }

/**
 * _isalpha - Checks for alphabetic character
 * @c: The character to check
 * Return: 1 if c is an alphabetic character, 0 otherwise
 */
int _isalpha(int c) { return 0; }

/**
 * _abs - Computes the absolute value of an integer
 * @n: The integer
 * Return: The absolute value of n
 */
int _abs(int n) { return 0; }

/**
 * _isupper - Checks for uppercase character
 * @c: The character to check
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c) { return 0; }

/**
 * _isdigit - Checks for a digit (0-9)
 * @c: The character to check
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c) { return 0; }

/**
 * _strlen - Computes the length of a string
 * @s: The string
 * Return: The length of the string
 */
int _strlen(char *s) { return 0; }

/**
 * _puts - Prints a string to the standard output
 * @s: The string to print
 */
void _puts(char *s) { }

/**
 * _strcpy - Copies a string
 * @dest: Destination buffer
 * @src: Source string
 * Return: A pointer to the destination string
 */
char *_strcpy(char *dest, char *src) { return dest; }

/**
 * _atoi - Converts a string to an integer
 * @s: The string to convert
 * Return: The converted integer
 */
int _atoi(char *s) { return 0; }

/**
 * _strcat - Concatenates two strings
 * @dest: Destination string
 * @src: Source string
 * Return: A pointer to the resulting string
 */
char *_strcat(char *dest, char *src) { return dest; }

/**
 * _strncat - Concatenates n characters from two strings
 * @dest: Destination string
 * @src: Source string
 * @n: Number of characters to concatenate
 * Return: A pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n) { return dest; }

/**
 * _strncpy - Copies n characters from a string
 * @dest: Destination buffer
 * @src: Source string
 * @n: Number of characters to copy
 * Return: A pointer to the destination string
 */
char *_strncpy(char *dest, char *src, int n) { return dest; }

/**
 * _strcmp - Compares two strings
 * @s1: First string
 * @s2: Second string
 * Return: An integer less than, equal to, or greater than zero if s1 is found, respectively,
 * to be less than, to match, or be greater than s2
 */
int _strcmp(char *s1, char *s2) { return 0; }

/**
 * _memset - Fills memory with a constant byte
 * @s: Memory area
 * @b: Byte to fill the memory area with
 * @n: Number of bytes to fill
 * Return: A pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n) { return s; }

/**
 * _memcpy - Copies memory area
 * @dest: Destination memory area
 * @src: Source memory area
 * @n: Number of bytes to copy
 * Return: A pointer to the destination
 */
char *_memcpy(char *dest, char *src, unsigned int n) { return dest; }

/**
 * _strchr - Locates character in a string
 * @s: The string
 * @c: The character to locate
 * Return: A pointer to the located character, or NULL if the character is not found
 */
char *_strchr(char *s, char c) { return s; }

/**
 * _strspn - Gets the length of a prefix substring
 * @s: The string
 * @accept: The prefix substring
 * Return: The length of the prefix substring
 */
unsigned int _strspn(char *s, char *accept) { return 0; }

/**
 * _strpbrk - Searches a string for any of a set of bytes
 * @s: The string
 * @accept: The set of bytes to search for
 * Return: A pointer to the first occurrence in s of any of the bytes in accept, or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept) { return s; }

/**
 * _strstr - Locates a substring
 * @haystack: The main string
 * @needle: The substring to locate
 * Return: A pointer to the beginning of the located substring, or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle) { return haystack; }
